@charset "UTF-8";
@font-face {
  font-family: 'Inconsolata';
  src: url("../../fonts/Inconsolata-Bold.eot");
  /* IE9 Compat Modes */
  src: url("../../fonts/Inconsolata-Bold.eot?#iefix") format("embedded-opentype"), url("../../fonts/Inconsolata-Bold.woff") format("woff"), url("../../fonts/Inconsolata-Bold.ttf") format("truetype"), url("../../fonts/Inconsolata-Bold.svg#1e809497c56d5ee053aedc961ac7170b") format("svg");
  /* Legacy iOS */
  font-style: normal;
  font-weight: 700; }
@font-face {
  font-family: 'Inconsolata';
  src: url("../../fonts/Inconsolata-Regular.eot");
  /* IE9 Compat Modes */
  src: url("../../fonts/Inconsolata-Regular.eot?#iefix") format("embedded-opentype"), url("../../fonts/Inconsolata-Regular.woff") format("woff"), url("../../fonts/Inconsolata-Regular.ttf") format("truetype"), url("../../fonts/Inconsolata-Regular.svg#13437d772f407632d8beb98399776c52") format("svg");
  /* Legacy iOS */
  font-style: normal;
  font-weight: 400; }
@-webkit-keyframes sk-scaleout {
  0% {
    -webkit-transform: scale(0); }
  100% {
    -webkit-transform: scale(1);
    opacity: 0; } }
@-moz-keyframes sk-scaleout {
  0% {
    -moz-transform: scale(0); }
  100% {
    -moz-transform: scale(1);
    opacity: 0; } }
@keyframes sk-scaleout {
  0% {
    -webkit-transform: scale(0);
    -moz-transform: scale(0);
    -ms-transform: scale(0);
    -o-transform: scale(0);
    transform: scale(0); }
  100% {
    -webkit-transform: scale(1);
    -moz-transform: scale(1);
    -ms-transform: scale(1);
    -o-transform: scale(1);
    transform: scale(1);
    opacity: 0; } }
/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after {
  content: '';
  content: none; }

q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

a {
  color: initial; }

/* apply a natural box layout model to all elements, but allowing components to change */
html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit;
  -webkit-tap-highlight-color: transparent; }

@font-face {
  font-family: "myfont";
  src: url("../fonts/myfont.eot");
  src: url("../fonts/myfont.eot?#iefix") format("eot"), url("../fonts/myfont.woff") format("woff"), url("../fonts/myfont.ttf") format("truetype"), url("../fonts/myfont.svg#myfont") format("svg");
  font-weight: normal;
  font-style: normal; }
.s:before {
  display: inline-block;
  font-family: "myfont";
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.s-lg {
  font-size: 1.3333333333333333em;
  line-height: 0.75em;
  vertical-align: -15%; }

.s-2x {
  font-size: 2em; }

.s-3x {
  font-size: 3em; }

.s-4x {
  font-size: 4em; }

.s-5x {
  font-size: 5em; }

.s-fw {
  width: 1.2857142857142858em;
  text-align: center; }

.s-MAC_CarouselArrow:before {
  content: ""; }

.s-MAC_DetailPageArrow:before {
  content: ""; }

.s-MAC_Facebook:before {
  content: ""; }

.s-MAC_FollowPlusSign:before {
  content: ""; }

.s-MAC_MenuDownArrow:before {
  content: ""; }

.s-MAC_Pinterest:before {
  content: ""; }

.s-MAC_Reblog:before {
  content: ""; }

.s-MAC_SearchIcon:before {
  content: ""; }

.s-MAC_SocialShare:before {
  content: ""; }

.s-MAC_Twitter:before {
  content: ""; }

.s-MAC_Slideshow:before {
  content: ""; }

.s-MAC_Logo:before {
  content: ""; }

.s-MAC_HeartLike:before {
  content: ""; }

.s-MAC_Notes:before {
  content: ""; }

.s-MAC_SearchBarX:before {
  content: ""; }

.s-MAC_Youtube:before {
  content: ""; }

.s-MAC_Instagram:before {
  content: ""; }

.s-Play:before {
  content: ""; }

.s-X:before {
  content: ""; }

.s-MAC_MobileX:before {
  content: ""; }

html, body {
  -webkit-font-feature-settings: "kern", "liga", "pnum";
  -moz-font-feature-settings: "kern", "liga", "pnum";
  -ms-font-feature-settings: "kern", "liga", "pnum";
  font-feature-settings: "kern", "liga", "pnum";
  -webkit-font-smoothing: antialiased;
  color: black;
  font-family: "Inconsolata", sans-serif;
  font-size: 16px;
  line-height: 1.5;
  margin: 0;
  letter-spacing: 0.05em; }
  @media (max-width: 750px) {
    html, body {
      font-size: 7px; } }

h1,
h2,
h3,
h4,
h5,
h6 {
  line-height: 1.2;
  margin: 0 0 0.75em;
  text-transform: uppercase; }

p {
  margin: 0 0 0.75em; }

input, label, select {
  display: block;
  font-family: "Inconsolata", sans-serif;
  font-size: 16px; }

body, html {
  background-color: #eee; }

#page-container {
  width: 70%;
  max-width: 1000px;
  margin: 0 auto;
  opacity: 0;
  visibility: hidden; }

#content {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  width: 100%;
  height: 100%; }
  #content #background, #content canvas {
    width: 100%;
    height: 100%; }
  #content canvas {
    background-color: #eee; }

.main {
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%; }
  .main .text {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 2em; }



/*# sourceMappingURL=data:application/json;base64, */